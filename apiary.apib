FORMAT: 1A
HOST: http://192.168.1.148:3001


# YOOBIC External API v1
Welcome to the YOOBIC API documentation.

It's designed for developers and engineers who are interested in building custom applications or integrating with other APIs.
The API allows you to manage in a simple, programmatic way using converional HTTP requests. 

The endpoints are intuitive and powerful, allowing you to easily make calls to retrieve information or to execute actions.

The API documentation will start with a general overview about the design and technology that has been implemented, followed by reference information about specific endpoints.

### HTTP Requests

The API is fully [RESTful]("http://en.wikipedia.org/wiki/Representational_state_transfer").  Users can access the resources provided by the API by using standard HTTP methods.

Any tool that is fluent in HTTP can communicate with the API simply by requesting the correct URI.  Requests should be made using the HTTPS protocol so that traffic is encrypted.  The interface responds to different methods depending on the action required.

<table class="pure-table pure-table-horizontal">
  <thead>
      <tr>
          <th>Method</th>
          <th>Usage</th>
      </tr>
  </thead>
  <tbody>
      <tr>
          <td>GET</td>
          <td>
              <p>For simple retrieval of information about your account, or environment, you should use the <strong>GET</strong> method.  The information you request will be returned to you as a JSON object.</p>

              <p>The attributes defined by the JSON object can be used to form additional requests.  Any request using the GET method is read-only and will not affect any of the objects you are querying.</p>
          </td>
      </tr>
      <tr>
          <td>DELETE</td>
          <td>
              <p>To destroy a resource and remove it from your account and environment, the <strong>DELETE</strong> method should be used.  This will remove the specified object if it is found.  If it is not found, the operation will return a response indicating that the object was not found.</p>

              <p>This <a href="http://en.wikipedia.org/wiki/Idempotent#Computer_science_meaning">idempotency</a> means that you do not have to check for a resource's availability prior to issuing a delete command, the final state will be the same regardless of its existence.</p>
          </td>
      </tr>
      <tr>
          <td>PUT</td>
          <td>
              <p>To update the information about a resource in your account, the <strong>PUT</strong> method is available.</p>

              <p>Like the DELETE Method, the PUT method is idempotent.  It sets the state of the target using the provided values, regardless of their current values.  Requests using the PUT method do not need to check the current attributes of the object.</p>
          </td>
      </tr>
      <tr>
          <td>POST</td>
          <td>
              <p>To create a new object, your request should specify the <strong>POST</strong> method.</p>

              <p>The POST request includes all of the attributes necessary to create a new object.  When you wish to create a new object, send a POST request to the target endpoint.</p>
          </td>
      </tr>
      <tr>
          <td>HEAD</td>
          <td>
              <p>Finally, to retrieve metadata information, you should use the <strong>HEAD</strong> method to get the headers.  This returns only the header of what would be returned with an associated GET request.</p>

              <p>Response headers contain some useful information about your API access and the results that are available for your request.</p>

              <p>For instance, the headers contain your current rate-limit value and the amount of time available until the limit resets.  It also contains metrics about the total number of objects found, pagination information, and the total content length.</p>
          </td>
      </tr>
  </tbody>
</table>


### HTTP Statuses

Along with the HTTP methods that the API responds to, it will also return standard HTTP statuses, including error codes.

In the event of a problem, the status will contain the error code, while the body of the response will usually contain additional information about the problem that was encountered.

In general, if the status returned is in the 200 range, it indicates that the request was fulfilled successfully and that no error was encountered.

Return codes in the 400 range typically indicate that there was an issue with the request that was sent.  Among other things, this could mean that you did not authenticate correctly, that you are requesting an action that you do not have authorization for, that the object you are requesting does not exist, or that your request is malformed.

If you receive a status in the 500 range, this generally indicates a server-side problem.  This means that we are having an issue on our end and cannot fulfill your request currently.

#### EXAMPLE ERROR RESPONSE


    HTTP/1.1 403 Forbidden

    {
      "error":       "forbidden",
      "description": "You do not have access for the attempted action."
    }

### Responses

Upon a successful request, a response body will typically be sent back in the form of a JSON object.  An exception to this is when a DELETE request is processed, which will result in a successful HTTP 204 status and an empty response body.

Inside of this JSON object, the resource type that was the target of the request will be set as the key.  This will be the singular form of the word if the request operated on a single object, and the plural form of the word if a collection was processed.

For example, if you send a GET request to `/v1/users/$USER_ID` you will get back an object with a key called "`user`".  However, if you send the GET request to the general collection at `/v1/users`, you will get back an object with a key called "`users`".

The value of these keys will generally be a JSON object for a request on a single object and an array of objects for a request on a collection of objects.

#### Example Responses

For a single object:

    {
        "user": {
            "name": "example.com"
            . . .
        }
    }

For an object collection:

    {
        "users": [
            {
                "name": "example.com"
                . . .
            },
            {
                "name": "second.com"
                . . .
            }
        ]
    }

### Pagination

In order to handle large numbers of objects, the returned response will be paginated.  By default, the pagination function is configured to return 25 objects at a time.

The pagination information is included in the headers of the response when more than one object is being returned.  The relevant pieces of information are:

* **Total**: The total number of results for the request.
* **Link**: This provides information about additional pages.  Check the [links] section for more information.

You can adjust the number of results per page by passing a `per_page` query parameter.  This can be used to specify the number of results returned per page.

To get the information from any of the additional pages, you should pass a `page` query parameter.  For instance, if you have 60 total results and are using the default pagination rules, you could get results 26-50 by adding `?page=2` to your request.

The [links] header will give you much better information about the relationship of the pages to one another and what the last of information will be.

#### Sample Pagination Header Information

    . . .
    Link: <https://api.yoobic.com/v1/images?page=11&per_page=5>; rel="last", <https://api.yoobic.com/v1/images?page=2&per_page=5>; rel="next"
    Total: 51
    . . .

### Rate Limit

The number of requests that can be made through the API is currently limited to 1200 per hour.

The rate limiting information is contained within the response headers of each request.  The relevant headers are:

* **X-RateLimit-Limit**: The number of requests that can be made per hour.
* **X-RateLimit-Remaining**: The number of requests that remain before you hit your request limit.  See the information below for how the request limits expire.
* **X-RateLimit-Reset**: This represents the time when the oldest request will expire.  The value is given in [UTC epoch seconds](http://en.wikipedia.org/wiki/Unix_time).  See below for more information about how request limits expire.

As long as the `X-RateLimit-Remaining` count is above zero, you will be able to make additional requests.

The way that a request expires and is removed from the current limit count is important to understand.  Rather than counting all of the requests for an hour and resetting the `X-RateLimit-Remaining` value at the end of the hour, each request instead has its own timer.

This means that each request contributes toward the `X-RateLimit-Remaining` count for one complete hour after the request is made.  When that request's timer runs out, it is no longer counted towards the request limit.

This has implications on the meaning of the `X-RateLimit-Reset` header as well.  Because the entire rate limit is not reset at one time, the value of this header is set to the time when the *oldest* request will expire.

Keep this in mind if you see your `X-RateLimit-Reset` value change, but not move an entire hour into the future.

If the `X-RateLimit-Remaining` reaches zero, subsequent requests will receive a 429 error code until the request reset has been reached.  You can see the format of the response in the examples.

#### Sample Rate Limit Headers

    . . .
    X-RateLimit-Limit: 1200
    X-RateLimit-Remaining: 1193
    X-RateLimit-Reset: 1402425459
    . . .

#### Sample Rate Exceeded Response

    429 Too Many Requests
    {
            id: "too_many_requests",
            message: "API Rate limit exceeded."
    }

### Link Headers

Link headers are used to provide information about the remaining paginated portions of the requested information.

For instance, if you request a listing of all available images at 5 results per page (as discussed in the last section), a link header will be set in the response that will contain the URIs of the related pages.

The related pages will be defined as a URI and a `rel` attribute, which defines the relationship of the URI to the response that is being sent back.  The `rel` attribute may be any of the following:

* **first**: The URI of the first page of results.
* **prev**: The URI of the previous sequential page of results.
* **next**: The URI of the next sequential page of results.
* **last**: The URI of the last page of results.

The link headers will only include the links that make sense.  So if the `Total` is less than the `per_page` value, then no link header will be set.  For the first page of results, no `first` or `prev` links will ever be set.  This convention holds true in other situations where a link would not make sense.

#### Link Header Example

    Link: <https://api.yoobic.com/v1/images?page=1&per_page=5>; rel="first", <https://api.yoobic.com/v1/images?page=1&per_page=5>; rel="prev", <https://api.yoobic.com/v1/images?page=11&per_page=5>; rel="last", <https://api.yoobic.com/v1/images?page=3&per_page=5>; rel="next"</code></pre>

### Curl Examples

Throughout this document, some example API requests will be given using the `curl` command.  This will allow us to demonstrate the various endpoints in a simple, textual format.

The names of account-specific references (like User IDs, for instance) will be represented by variables.  For instance, a User ID may be represented by a variable called `$USER_ID`  You can set the associated variables in your environment if you wish to use the examples without modification.

The first variable that you should set to get started is your OAuth authorization token.  The next section will go over the details of this, but you can set an environmental variable for it now.

Generate a token by going to the [Apps & API](https://cloud.yoobic.com/settings/applications) section of the YOOBIC control panel.  Use an existing token if you have saved one, or generate a new token with the "Generate new token" button.  Copy the generated token and use it to set and export the TOKEN variable in your environment as the example shows.

You may also wish to set some other variables now or as you go along.  For example, you may wish to set the `USER_ID` variable to one of your user IDs since this will be used frequently in the API.

If you are following along, make sure you use a User ID that you control for so that your commands will execute correctly.

If you need access to the headers of a response through `curl`, you can pass the `-i` flag to display the header information along with the body.  If you are only interested in the header, you can instead pass the `-I` flag, which will exclude the response body entirely.

#### Set and Export your OAuth Token

    export TOKEN={your_token_here}

#### Set and Export a Variable

    export USER_ID=1111111

### OAuth Authentication

In order to interact with the YOOBIC API, you or your application must authenticate.

The YOOBIC API handles this through OAuth, an open standard for authorization.  OAuth allows you to delegate access to your account in full or in read-only mode.

You can generate an OAuth token by visiting the [Apps & API]("https://cloud.yoobic.com/settings/applications") section of the YOOBIC control panel for your account.

An OAuth token functions as a complete authentication request.  In effect, it acts as a substitute for a username and password pair.

Because of this, it is absolutely **essential** that you keep your OAuth tokens secure.  In fact, upon generation, the web interface will only display each token a single time in order to prevent the token from being compromised.

#### How to Authenticate with OAuth

There are two separate ways to authenticate using OAuth.
      
The first option is to send a bearer authorization header with your request.  This is the preferred method of authenticating because it completes the authorization request in the header portion, away from the actual request.

You can also authenticate using basic authentication.  The normal way to do this with a tool like **curl** is to use the **-u** flag which is used for passing authentication information.
        
You then send the username and password combination delimited by a colon character.  We only have an OAuth token, so use the OAuth token as the username and leave the password field blank (make sure to include the colon character though).

This is effectively the same as embedding the authentication information within the URI itself.

#### Authenticate with a Bearer Authorization Header

    curl -X $HTTP_METHOD -H "Authorization: Bearer $ACCESS_TOKEN" "https://api.yoobic.com/v1/$OBJECT"

#### Authenticate with Basic Authentication

    curl -X $HTTP_METHOD -u "$ACCESS_TOKEN:" "https://api.yoobic.com/v1/$OBJECT"

### Parameters

There are two different ways to pass parameters in a request with the API.

The best way to pass parameters is as a JSON object containing the appropriate attribute names and values as key-value pairs.  When you use this format, you should specify that you are sending a JSON object in the header.

This is done by setting the `Content-Type` header to `application/json`.  This ensures that your request is interpreted correctly.

Another way of passing parameters is using standard query attributes.

Using this format, you would pass the attributes within the URI itself.  Tools like `curl` can take parameters and value as arguments to create the appropriate URI.

With `curl` this is done using the `-F` flag and then passing the key and value as an argument.  The argument should take the form of a quoted string with the attribute being set to a value with an equal sign.

You could also use a standard query string if that would be easier in our application.  In this case, the parameters would be embedded into the URI itself by appending a `?` to the end of the URI and then setting each attribute with an equal sign.  Attributes can be separated with a `&`.

#### Pass Parameters as a JSON Object

    curl -H "Authorization: Bearer $TOKEN" \
        -H "Content-Type: application/json" \
        -d '{"name": "example.com", "ip_address": "127.0.0.1"}' \
        -X POST "https://api.yoobic.com/v1/domains"

#### Pass Parameters as URI Components

    curl -H "Authorization: Bearer $TOKEN" \
        -F "name=example.com" -F "ip_address=127.0.0.1" \
        -X POST "https://api.yoobic.com/v1/domains"

#### Pass Parameters as a Query String

    curl -H "Authorization: Bearer $TOKEN" \
         -X POST \
         "https://api.yoobic.com/v1/domains?name=example.com&ip_address=127.0.0.1"

### Cross Origin Resource Sharing

In order to make requests to the API from other domains, the API implements Cross Origin Resource Sharing (CORS) support.

CORS support is generally used to create AJAX requests outside of the domain that the request originated from.  This is necessary to implement projects like control panels utilizing the API.  This tells the browser that it can send requests to an outside domain.

The procedure that the browser initiates in order to perform these actions (other than GET requests) begins by sending a "preflight" request.  This sets the `Origin` header and uses the `OPTIONS` method.  The server will reply back with the methods it allows and some of the limits it imposes.  The client then sends the actual request if it falls within the allowed constraints.

This process is usually done in the background by the browser, but you can use curl to emulate this process using the example provided.  The headers that will be set to show the constraints are:

* **Access-Control-Allow-Origin**: This is the domain that is sent by the client or browser as the origin of the request.  It is set through an `Origin` header.
* **Access-Control-Allow-Methods**: This specifies the allowed options for requests from that domain.  This will generally be all available methods.
* **Access-Control-Expose-Headers**: This will contain the headers that will be available to requests from the origin domain.
* **Access-Control-Max-Age**: This is the length of time that the access is considered valid.  After this expires, a new preflight should be sent.
* **Access-Control-Allow-Credentials**: This will be set to `true`.  It basically allows you to send your OAuth token for authentication.

You should not need to be concerned with the details of these headers, because the browser will typically do all of the work for you.

#### Example Preflight Request

    curl -I -H "Origin: https://example.com" -X OPTIONS "https://api.yoobic.com/v1/users"

#### Example Preflight Response

    . . .
    Access-Control-Allow-Origin: https://example.com
    Access-Control-Allow-Methods: GET, POST, PUT, PATCH, DELETE, OPTIONS
    Access-Control-Expose-Headers: X-RateLimit-Limit, X-RateLimit-Remaining, X-RateLimit-Reset, Total, Link
    Access-Control-Max-Age: 86400
    Access-Control-Allow-Credentials: true
    . . .

# Group User

## Existing User Operations [/users/{user_id}]
+ Parameters
    + user_id (number, optional) - ID of the User in the form of an integer

### Get User Details [GET]
Get user details for the given user_id.
+ Request
    + Headers
        
            Authorization: Bearer {token}
            Accept: application/json
            
+ Response 200 (application/json)

        {
            "_id": "uuid",
            "username": "olajuwon99@houston.com",
            "email": "olajuwon99@houston.com",
            "created": "2018-05-23T04:51:40.862Z",
            "lastUpdated": "2018-05-23T04:51:40.862Z",
            "_lmt": "2018-05-23T04:51:40.862Z",
            "_ect": "2018-05-23T04:51:40.862Z",
            "_tenantRef": "HOU",
            "tags": ["The Dream", "Hakeem the Dream Olajuwon"],
            "role": "Advisor"
        }
        
### Delete User [DELETE]
Delete user by id.
+ Request
    + Headers
        
            Authorization: Bearer {token}

+ Response 204

### Update User [PUT]
Update a single user.
+ Request (application/json)
        
        {
            "username": "olajuwon99@houston.com",
            "email": "olajuwon99@houston.com",
            "tags": ["The Dream", "Hakeem the Dream Olajuwon", "The Dream Shake"],
            "role": "Advisor"
        }

    + Headers
        
            Authorization: Bearer {token}
            Accept: application/json
        
+ Response 200 (application/json)

        {
            "_id": "uuid",
            "username": "olajuwon99@houston.com",
            "email": "olajuwon99@houston.com",
            "created": "2018-05-23T04:51:40.862Z",
            "lastUpdated": "2018-05-23T04:51:40.862Z",
            "_lmt": "2018-05-23T04:51:40.862Z",
            "_ect": "2018-05-23T04:51:40.862Z",
            "_tenantRef": "HOU",
            "tags": ["The Dream", "Hakeem the Dream Olajuwon", "The Dream Shake"],
            "role": "Advisor"
        }
        
### Update property [PATCH]
Update subset of properties of user
+ Request (application/json)
        
        {
            "tags": ["The Dream", "Hakeem the Dream Olajuwon", "The Dream Shake"]
        }

    + Headers
        
            Authorization: Bearer {token}
            Accept: application/json
        
+ Response 200 (application/json)

        {
            "_id": "uuid",
            "username": "olajuwon99@houston.com",
            "email": "olajuwon99@houston.com",
            "created": "2018-05-23T04:51:40.862Z",
            "lastUpdated": "2018-05-23T04:51:40.862Z",
            "_lmt": "2018-05-23T04:51:40.862Z",
            "_ect": "2018-05-23T04:51:40.862Z",
            "_tenantRef": "HOU",
            "tags": ["The Dream", "Hakeem the Dream Olajuwon", , "The Dream Shake"],
            "role": "Advisor"
        }
        
## Users Operations [/users]

### Create a New User [POST]

You may create your own user using this action. It takes a JSON
object containing user details and under which security group it's in.

+ Request (application/json)

        {
            "first_name": "Hakeem",
            "last_name": "Olajuwon",
            "email": "olajuwon99@houston.com",
            "username": "olajuwon99@houston.com",
            "password": "123456",
            "language": "en",
            "groups": ["houston", "toronto"],
            "tags": ["The Dream", "Hakeem the Dream Olajuwon"],
            "role": "Advisor"
        }
        
    + Headers
        
            Authorization: Bearer {token}
            Accept: application/json

+ Response 200 (application/json)


    + Body

            {
                "_id": "uuid",
                "first_name": "Hakeem",
                "last_name": "Olajuwon",
                "username": "olajuwon99@houston.com",
                "email": "olajuwon99@houston.com",
                "created": "2018-05-23T04:51:40.862Z",
                "lastUpdated": "2018-05-23T04:51:40.862Z",
                "_lmt": "2018-05-23T04:51:40.862Z",
                "_ect": "2018-05-23T04:51:40.862Z",
                "_tenantRef": "HOU",
                "tags": ["The Dream", "Hakeem the Dream Olajuwon"],
                "client_role": "Advisor"

            }

### List All Users [GET]
List all users.
+ Request
    + Attributes
        - Authorization (Default Header)
    + Headers
    
            Accept: application/json

+ Response 200 (application/json)

        [
            {
                "_id": "string",
                "firstName": "Jon",
                "lastName": "Doe"
            },
            {
                "_id": "string",
                "firstName": "Jane",
                "lastName": "Doe"
            }
        ]
        
# Data Structures
## Default Header (object)
+ `Authorization`: `Bearer JWT` (string, required)