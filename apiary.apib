FORMAT: 1A
HOST: http://192.168.1.148:3001


# YOOBIC External API v1
Welcome to the YOOBIC API documentation.

It's designed for developers and engineers who are interested in building custom applications or integrating with other APIs.
The API allows you to manage in a simple, programmatic way using converional HTTP requests. 

The endpoints are intuitive and powerful, allowing you to easily make calls to retrieve information or to execute actions.

The API documentation will start with a general overview about the design and technology that has been implemented, followed by reference information about specific endpoints.

##External API Capabilities Overview
| Field                       | GET | GET CSV   | POST | PUT | DELETE |
|-----------------------------|-----|-----------|------|-----|--------|
|`stores`                     |  x  |     x     |  x   |  x  |    x   |
|`users`                      |  x  |     x     |  x   |  x  |        |
|`placegroups`                |  x  |           |  x   |  x  |    x   |
|`teams`                      |  x  |           |  x   |  x  |    x   |
|`missions`                   |  x  |     x     |  x   |  x  |        |
|`sections` (mission include) |  x  |           |      |     |        |
|`tasks` (for a mission)      |  x  |     x     |  x   |  x  |        |
|`mission responses`          |  x  |     x     |      |     |        |
|`task responses`             |  x  |     x     |      |     |        |
|`user assigned places`       |  x  |     x     |  x   |     |    x   |
|`catalogs`                   |  x  |     x     |  x   |  x  |        |
|`catalog items`              |  x  |     x     |  x   |  x  |    x   |
|`custom views`               |  x  |     x     |      |     |        |
|`contacts`                   |     |           |      |     |        |
|`manager permissions`        |     |           |      |     |        |


#Table of Contents
- [API Access](#section-api-access) - OAuth2 API access authentication
- [API Help](#section-api-help) - Weâ€™re here to help!
- [API Technical Requirements](#section-api-tech-requirements) - Technical requirements for communicating with the API - security protocols and rate limits
- [API Requests](#section-api-requests) - Formatting of requests sent to the **RESTful** YOOBIC API
    - [Sorting](#section-api-requests-sorting) - Sorting the results using different criteria
    - [Paging](#section-api-requests-paging) - Paging through your results
    - [CRUD Requests](#section-api-requests-crud-requests) - Creating/updating/deleting resources
- [API Responses](#section-api-responses) - The common response format of each request
- [Asynchronous CSV Jobs](#section-async-jobs) - How data is requested asynchronously for endpoints and returned in CSV format
- [Endpoint Documentation](#section-endpoint-documentation) - Documentation specific for each endpoint. You may also use the links on the table on the sidebar to navigate to any endpoint.

<a id="section-api-access"></a>
#API Access
Authentication to the YOOBIC API uses OAuth2 and a token is required for access to the API.
OAuth2 tokens are set in the `Authorization` header for your requests as follows:

        Authorization: Bearer abcdef1234567890

Contact your YOOBIC Customer Success Manager or [support@yoobic.com](mailto:support@yoobic.com) for obtaining an access token to the API.

<a id="section-api-help"></a>
#API Help

Have questions or need support?
Email your YOOBIC Customer Success Manager or [support@yoobic.com](mailto:support@yoobic.com).

<a id="section-api-tech-requirements"></a>
# API Technical Requirements
## Protocol and Communication
- `public-api.yoobic.com` is only accessible via HTTPS, using TLS 1.1 or better.

## Rate Limits
The API enforces the following rate limits. Exceeding these limits will return the following HTTP error code: `429 Too Many Requests (Rate Limit Exceeded)`
- **Interval Limit** 10 requests per second (must be in serial, concurrent requests cannot be accepted)
- **Daily Limit** 100,000 requests per day
If you need higher limits to support your specific use case, please contact your YOOBIC Customer Success Manager or [support@yoobic.com](mailto:support@yoobic.com)

<a id="section-api-requests"></a>
#API Requests

Requests for the YOOBIC API are all RESTful, with parameters following the endpoint path.
Each request in the documentation is displayed with the appropriate HTTP method and sample parameters.
Data may be sent in as parameters or in the request body as JSON.
The requests on the YOOBIC API allow for sorting and paging (and filtering on a per entity basis).

<a id="section-api-requests-sorting"></a>
## Sorting

Sorting is done by two parameters in any request. If `sort_by` appears as
a parameter, `sort_direction` is also required. Currently requests may be sorted by only one field.

| Parameter            | Type                   | Example                |
|----------------------|------------------------|------------------------|
| `sort_by`            | string                 | `sort_by=created_at`   |
| `sort_direction`     | string `asc` or `desc` | `sort_direction=desc`  |

<a id="section-api-requests-paging"></a>
## Paging

Paging automatically occurs for all requests. The following parameters allow you to control how many responses are returned.

| Parameter            | Type                               | Example                |
|----------------------|------------------------------------|------------------------|
| `page`               | integer, default: `1`              | `page=31`              |
| `per_page`           | integer, default: `25`, max: `200` | `per_page=100`         |


<a id="section-api-requests-crud-requests"></a>
## CRUD Requests

Create, update and delete requests follow standard RESTful practices. While some fields
are available on a resource, you may not be able to set values such as `created_at` during
a CREATE, UPDATE or DELETE action. The allowed parameters are listed at the beginning of each CRUD
section for a particular resource.

<a id="section-api-responses"></a>
#API Responses
All API response are formatted in a consistent format, regardless of HTTP status code.

## Response Headers
- content-type: application/json; charset=utf-8
- status: 200 OK
- ratelimit-limit: 1200
- ratelimit-remaining: 1137
- ratelimit-reset: 1415984218

## Response Body

```
{
    "paging": {
        "next_page": null,
        "current_page": 1,
        "previous_page": null,
        "per_page": 25,
        "total_records": 18,
        "first_timestamp": 1403156620.0609322,
        "last_timestamp": 1400008286.827591
    },
    "data?": {},
    "data?": [],
    "errors?": []
}
```

### Response "paging" hash
The paging hash in a response only exists if the data result is an array which appears
during actions and other specific API endpoint actions.

- `next_page` - Contains the value for the next page. Will be null if no further pages exist.
- `current_page` - The currently requested page. Defaults to `1` if no page is given in the request.
- `previous_page` - The page prior to the current page. Will be null if `current_page` is `1`.
- `per_page` - The maximum amount of records that may be returned in this response. If not given in parameters, defaults to `25`.
- `total_records` - The total records that match this request, regardless of current paging results.
- `first_timestamp` - The `created_at` timestamp of the first record in the results `data` array.
- `last_timestamp` - The `created_at` timestamp of the last record in the results `data` array.

### Response "data" object
The `data` object in the results hash may be either a hash or an array, depending on the endpoint action.

### Response "errors" hash
The `errors` array only appears in results when the request `status_code` is in the 400 or 500 range
to inform the client of errors such as incorrect field formats, model validation errors or server errors.

### Description Of Usual Server Responses:
- 200 `OK` - the request was successful (some API calls may return 201 instead).
- 201 `Created` - the request was successful and a resource was created.
- 204 `No Content` - the request was successful but there is no representation to return (i.e. the response is empty).
- 400 `Bad Request` - the request could not be understood or was missing required parameters.
- 401 `Unauthorized` - authentication failed or user doesn't have permissions for requested operation.
- 403 `Forbidden` - access denied.
- 404 `Not Found` - resource was not found.
- 405 `Method Not Allowed` - requested method is not supported for resource.
- 429 `Too Many Requests` - rate limit exceeded.

<a id="section-async-jobs"></a>
#Asynchronous CSV Jobs

**Note 1:** This feature is currently available on the following endpoints: `stores`, `users`, `user_place_assignments`, `mission_responses`, `task_responses`, `missions`, `tasks`, `custom_views`,`catalogs`, and `catalog_items` endpoints.

By default, all requests to the External API are synchronous and all data requested are returned within the same request/response cycle.
One limitation of this approach is that all responses are limited to a maximum number of records as defined in the [Paging section](#section-api-requests-paging).
To enable returning an unlimited number of records, you are able to create a job to be executed asynchronously to return all records that match your current query.

## Async Parameters

Any existing request on enabled endpoints may be converted into an asynchronous job by simply adding the following parameters:

- `_async=true` - Available values are `true`, and `false`. Defaults to `false` on all enabled endpoints.
- `_delimiter=,` - Available values are `,`, `;`, and `|`. Defaults to `,`.
- `_headers=true` - Available values are `true` and `false`. Defaults to `true`.

### Converting a Synchronous Request into an Asynchronous Job

Given the following request to get places for my company:

```https://public-api.yoobic.com/external/v1/stores```

It can be converted into an asynchronous job by adding `_async=true` as a parameter:

```https://public-api.yoobic.com/external/v1/stores?_async=true```


## Response Structure and Return Codes

When an asynchronous job is successfully created, a code of `200` will be returned. Any errors will result in a return code of `422` and error messages will be returned in the standard format.

The response structure of a requested asynchronous job includes a `job_guid` that you use on the [Async Jobs endpoint](#endpoint-async-jobs)
to query for the current status of the endpoint. This structure is almost identical to what is returned from the [Async Jobs endpoint](#endpoint-async-jobs).
Please refer to that endpoint for more details about obtaining the status of your job.

        {
            "data": {
                "id": 166,
                "job_guid": "3418c079-53dd-49da-a292-e8b6b1c3e443",
                "started_at": null,
                "completed_at": null,
                "failed_at": null,
                "error_type": null,
                "error_message": null,
                "download_url": null,
                "created_at": "2016-10-12T14:15:18.606-04:00",
                "updated_at": "2016-10-12T14:15:18.606-04:00",
                "file_size": null,
                "row_count": null,
                "status_url": "http://public-api.yoobic.com/external/v1/async_jobs/csv_exports/3418c079-53dd-49da-a292-e8b6b1c3e443/status"
            }
        }

## Export File Format

Currently the only file format supported for exporting all records via an asynchronous job is CSV. Once a job is completed, the response
body of the [Async Jobs endpoint](#endpoint-async-jobs) `status` request will return the `download_url` key that is the URL of the CSV.
For example, the above request will result in a file containing example data delimited by the default delimiter, with headers as follows:

`"download_url": "https://gospotcheck-csv-exports.s3.amazonaws.com/3418c079-53dd-49da-a292-e8b6b1c3e443_company_database_view_120161012-3-185q0i2.csv"`

Resulting CSV example:

    id,campaign_id,place_id,user_id,place_state,created_at
    23037,2848,1387270,8440,CO,2016-08-17 17:35:34.914505
    23038,2848,1387270,8440,CO,2016-08-17 17:49:11.850136
    23393,2848,1426954,8440,CO,2016-09-26 16:45:32.190473

## Export File Expiration

Currently all exports are set to expire **one week** after they are created at which point they will be inaccessible.

<a id="section-endpoint-documentation"></a>
#Endpoint Documentation

Documentation specific for each endpoint follows below. You may also use the links on the table on the right sidebar to navigate to any endpoint.

<a id="group-stores"></a>
# Group Stores
The Stores endpoint allows you to add, delete, list and update places
for your company.

Remember:
- Stores are your accounts or locations where mission responses are completed
- Stores can be assigned to a Placegroup after they are created

# Group User

## Existing User Operations [/users/{user_id}]

+ Parameters
    + user_id (number, optional) - ID of the User in the form of an integer

### Get User Details [GET]

Get user details for the given user_id.

+ Request
    + Headers
        
            Authorization: Bearer {token}
            Accept: application/json
            
+ Response 200 (application/json)

        {
            "_id": "uuid",
            "username": "olajuwon99@houston.com",
            "email": "olajuwon99@houston.com",
            "created": "2018-05-23T04:51:40.862Z",
            "lastUpdated": "2018-05-23T04:51:40.862Z",
            "_lmt": "2018-05-23T04:51:40.862Z",
            "_ect": "2018-05-23T04:51:40.862Z",
            "_tenantRef": "HOU",
            "tags": ["The Dream", "Hakeem the Dream Olajuwon"],
            "role": "Advisor"
        }
        
### Delete User [DELETE]

Delete user by id.

+ Request
    + Headers
        
            Authorization: Bearer {token}

+ Response 204

### Update User [PUT]
Update a single user.
+ Request (application/json)
        
        {
            "username": "olajuwon99@houston.com",
            "email": "olajuwon99@houston.com",
            "tags": ["The Dream", "Hakeem the Dream Olajuwon", "The Dream Shake"],
            "role": "Advisor"
        }

    + Headers
        
            Authorization: Bearer {token}
            Accept: application/json
        
+ Response 200 (application/json)

        {
            "_id": "uuid",
            "username": "olajuwon99@houston.com",
            "email": "olajuwon99@houston.com",
            "created": "2018-05-23T04:51:40.862Z",
            "lastUpdated": "2018-05-23T04:51:40.862Z",
            "_lmt": "2018-05-23T04:51:40.862Z",
            "_ect": "2018-05-23T04:51:40.862Z",
            "_tenantRef": "HOU",
            "tags": ["The Dream", "Hakeem the Dream Olajuwon", "The Dream Shake"],
            "role": "Advisor"
        }
        
### Update property [PATCH]
Update subset of properties of user
+ Request (application/json)
        
        {
            "tags": ["The Dream", "Hakeem the Dream Olajuwon", "The Dream Shake"]
        }

    + Headers
        
            Authorization: Bearer {token}
            Accept: application/json
        
+ Response 200 (application/json)

        {
            "_id": "uuid",
            "username": "olajuwon99@houston.com",
            "email": "olajuwon99@houston.com",
            "created": "2018-05-23T04:51:40.862Z",
            "lastUpdated": "2018-05-23T04:51:40.862Z",
            "_lmt": "2018-05-23T04:51:40.862Z",
            "_ect": "2018-05-23T04:51:40.862Z",
            "_tenantRef": "HOU",
            "tags": ["The Dream", "Hakeem the Dream Olajuwon", , "The Dream Shake"],
            "role": "Advisor"
        }
        
## Users Operations [/users]

### Create a New User [POST]

You may create your own user using this action. It takes a JSON
object containing user details and under which security group it's in.

+ Request (application/json)

        {
            "first_name": "Hakeem",
            "last_name": "Olajuwon",
            "email": "olajuwon99@houston.com",
            "username": "olajuwon99@houston.com",
            "password": "123456",
            "language": "en",
            "groups": ["houston", "toronto"],
            "tags": ["The Dream", "Hakeem the Dream Olajuwon"],
            "role": "Advisor"
        }
        
    + Headers
        
            Authorization: Bearer {token}
            Accept: application/json

+ Response 200 (application/json)


    + Body

            {
                "_id": "uuid",
                "first_name": "Hakeem",
                "last_name": "Olajuwon",
                "username": "olajuwon99@houston.com",
                "email": "olajuwon99@houston.com",
                "created": "2018-05-23T04:51:40.862Z",
                "lastUpdated": "2018-05-23T04:51:40.862Z",
                "_lmt": "2018-05-23T04:51:40.862Z",
                "_ect": "2018-05-23T04:51:40.862Z",
                "_tenantRef": "HOU",
                "tags": ["The Dream", "Hakeem the Dream Olajuwon"],
                "client_role": "Advisor"

            }

### List All Users [GET]
List all users.
+ Request
    + Attributes
        - Authorization (Default Header)
    + Headers
    
            Accept: application/json

+ Response 200 (application/json)

        [
            {
                "_id": "string",
                "firstName": "Jon",
                "lastName": "Doe"
            },
            {
                "_id": "string",
                "firstName": "Jane",
                "lastName": "Doe"
            }
        ]
        
# Data Structures
## Default Header (object)
+ `Authorization`: `Bearer JWT` (string, required)